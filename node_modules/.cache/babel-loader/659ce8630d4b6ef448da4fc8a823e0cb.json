{"ast":null,"code":"var _jsxFileName = \"/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Sandbox.js\",\n  _s2 = $RefreshSig$();\n/**\n * Build out this component to display a “sandbox” scene—see the description below.\n */\nimport { useEffect, useRef, useState } from 'react';\nimport { getGL, initVertexBuffer, initIndexBuffer, initSimpleShaderProgram } from './glsl-utils';\nimport XYGrid from './Geometries/XY-Grid';\nimport Cube from './Geometries/Cube';\nimport Sphere from './Geometries/Sphere';\nimport Group from './Group';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VERTEX_SHADER = `\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n\n  attribute vec3 vertexPosition;\n\n  void main(void) {\n    gl_Position = vec4(vertexPosition, 1.0);\n  }\n`;\nconst FRAGMENT_SHADER = `\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n\n  uniform vec3 color;\n\n  void main(void) {\n    gl_FragColor = vec4(color, 1.0);\n  }\n`;\nconst CANVAS_WIDTH = 512;\nconst CANVAS_HEIGHT = 512;\nconst FRAMES_PER_SECOND = 60;\nconst MILLISECONDS_PER_FRAME = 1000 / FRAMES_PER_SECOND;\nconst Sandbox = props => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [useWireframe, setUseWireframe] = useState(false);\n  const [showCube, setShowCube] = useState(false);\n  const [showXYGrid, setShowXYGrid] = useState(true);\n  const [showSphere, setShowSphere] = useState(false);\n  const canvasRef = useRef();\n  const timestampRef = useRef();\n  _s(useEffect(_s(() => {\n    _s();\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const gl = getGL(canvas);\n    if (!gl) {\n      alert('Sorry, Your browser does not support WebGL');\n    }\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    // Shader initialization\n    let abort = false;\n    const simpleShaderProgram = initSimpleShaderProgram(gl, VERTEX_SHADER, FRAGMENT_SHADER, shader => {\n      abort = true;\n      alert('Shader loading error' + gl.getShaderInfoLog(shader));\n    }, simpleShaderProgram => {\n      abort = true;\n      alert('Could not correctly link the shader program');\n    });\n    if (abort) {\n      alert('Fatal errors encountered; we cannot continue.');\n      return;\n    }\n    gl.useProgram(simpleShaderProgram);\n\n    // Group functionality available to use but unneeded in this example (I will use in future examples when needed)\n    const mainGroup = new Group();\n    const objectsToDraw = [];\n    // Conditionally add the XY grid\n    if (showXYGrid) {\n      objectsToDraw.push({\n        color: {\n          r: 0.7,\n          g: 0.7,\n          b: 0.7\n        },\n        vertices: createXYGridVertices(),\n        mode: gl.LINES\n      });\n    }\n\n    // Conditionally add the cube\n    if (showCube) {\n      const cubeObject = cube();\n      objectsToDraw.push({\n        color: {\n          r: 0.7,\n          g: 0.0,\n          b: 0.0\n        },\n        vertices: useWireframe ? toRawLineArray(cubeObject) : toRawTriangleArray(cubeObject),\n        mode: useWireframe ? gl.LINES : gl.TRIANGLES\n      });\n    }\n    const sphereObject = new Sphere(1, 12, 12);\n    if (showSphere) {\n      objectsToDraw.push({\n        color: {\n          r: 0,\n          g: 0.5,\n          b: 1\n        },\n        // Example color for the sphere\n        vertices: useWireframe ? sphereObject.toRawLineArray(sphereObject) : sphereObject.toRawTriangleArray(sphereObject),\n        mode: useWireframe ? gl.LINES : gl.TRIANGLES\n      });\n    }\n    const vertexPositonAttribute = gl.getAttribLocation(simpleShaderProgram, 'vertexPosition');\n    gl.enableVertexAttribArray(vertexPositonAttribute);\n    const colorUniform = gl.getUniformLocation(simpleShaderProgram, 'color');\n\n    // Load buffers with vertex data\n    objectsToDraw.forEach(objectToDraw => {\n      objectToDraw.verticesBuffer = initVertexBuffer(gl, objectToDraw.vertices);\n      if (!objectToDraw.colors) {\n        // If we have a single color, we expand that into an array\n        // of the same color over and over.\n        objectToDraw.colors = [];\n        for (let i = 0, maxi = objectToDraw.vertices.length / 3; i < maxi; i += 1) {\n          objectToDraw.colors = objectToDraw.colors.concat(objectToDraw.color.r, objectToDraw.color.g, objectToDraw.color.b);\n        }\n        objectToDraw.colorsBuffer = initVertexBuffer(gl, objectToDraw.colors);\n      }\n\n      // if indices exist ...\n      if (objectToDraw.indices) {\n        objectToDraw.indexBuffer = initIndexBuffer(gl, objectToDraw.indices);\n      }\n    });\n\n    // drawing obj by vertices\n    const drawMyObject = object => {\n      gl.uniform3f(colorUniform, object.color.r, object.color.g, object.color.b);\n      gl.bindBuffer(gl.ARRAY_BUFFER, object.verticesBuffer);\n      gl.vertexAttribPointer(vertexPositonAttribute, 3, gl.FLOAT, false, 0, 0);\n      if (useWireframe || !object.indexBuffer) {\n        gl.drawArrays(object.mode, 0, object.vertices.length / 3);\n      } else {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.indexBuffer);\n        gl.drawElements(object.mode, object.indices.length, gl.UNSIGNED_SHORT, 0);\n      }\n    };\n    const drawScene = () => {\n      // Clear the display.\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      const drawObjectOrGroup = item => {\n        if (item instanceof Group) {\n          item.forEachChild(drawObjectOrGroup); // Recursively draw children\n        } else {\n          drawMyObject(item); // Draw individual object\n        }\n      };\n\n      objectsToDraw.forEach(drawObjectOrGroup);\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n      // might not be needed\n      // gl.flush()\n    };\n\n    let previousTimestamp;\n    const nextFrame = timestamp => {\n      // Initialize the timestamp.\n      if (!previousTimestamp) {\n        previousTimestamp = timestamp;\n        window.requestAnimationFrame(nextFrame);\n        return;\n      }\n\n      // Check if it’s time to advance.\n      const progress = timestamp - previousTimestamp;\n      if (progress < MILLISECONDS_PER_FRAME) {\n        // Do nothing if it’s too soon.\n        window.requestAnimationFrame(nextFrame);\n        return;\n      }\n\n      // Update objects' positions, animations, etc., here based on elapsed time\n\n      drawScene();\n      if (timestampRef.current) {\n        timestampRef.current.innerText = `Timestamp: ${timestamp.toFixed(2)}`;\n      }\n\n      // Request the next frame.\n      previousTimestamp = timestamp;\n      window.requestAnimationFrame(nextFrame);\n    };\n    drawScene();\n    window.requestAnimationFrame(nextFrame);\n  }, \"ZdQBZ3rq7bWAAMQq6hlVCmYF0jM=\", false, function () {\n    return [gl.useProgram];\n  }), [useWireframe, showCube, showXYGrid, showSphere]), \"ZdQBZ3rq7bWAAMQq6hlVCmYF0jM=\", true);\n\n  // Function to toggle cube visibility\n  const toggleCube = () => setShowCube(!showCube);\n\n  // Function to toggle XY grid visibility\n  const toggleXYGrid = () => setShowXYGrid(!showXYGrid);\n  const toggleSphere = () => setShowSphere(!showSphere);\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The sandbox scene is where you can demonstrate features/capabilities of your library solely for the purpose of demonstrating them. It doesn\\u2019t have to fit any particular pitch or application.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setUseWireframe(!useWireframe),\n      children: useWireframe ? 'Show Filled' : 'Show Wireframe'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCube,\n      children: showCube ? 'Remove Cube' : 'Add Cube'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleXYGrid,\n      children: showXYGrid ? 'Remove XY Grid' : 'Add XY Grid'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleSphere,\n      children: showSphere ? 'Remove Sphere' : 'Add Sphere'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: CANVAS_WIDTH,\n        height: CANVAS_HEIGHT,\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: timestampRef,\n        style: {\n          position: 'absolute',\n          top: '7px',\n          left: '10px',\n          color: 'black'\n        },\n        children: \"Timestamp: 0.00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s2(Sandbox, \"8jBomSFDRfUSTp2+u+JznieAcAM=\");\n_c = Sandbox;\nexport default Sandbox;\nvar _c;\n$RefreshReg$(_c, \"Sandbox\");","map":{"version":3,"names":["useEffect","useRef","useState","getGL","initVertexBuffer","initIndexBuffer","initSimpleShaderProgram","XYGrid","Cube","Sphere","Group","VERTEX_SHADER","FRAGMENT_SHADER","CANVAS_WIDTH","CANVAS_HEIGHT","FRAMES_PER_SECOND","MILLISECONDS_PER_FRAME","Sandbox","props","useWireframe","setUseWireframe","showCube","setShowCube","showXYGrid","setShowXYGrid","showSphere","setShowSphere","canvasRef","timestampRef","canvas","current","gl","alert","enable","DEPTH_TEST","depthFunc","LESS","clearColor","viewport","width","height","abort","simpleShaderProgram","shader","getShaderInfoLog","useProgram","mainGroup","objectsToDraw","push","color","r","g","b","vertices","createXYGridVertices","mode","LINES","cubeObject","cube","toRawLineArray","toRawTriangleArray","TRIANGLES","sphereObject","vertexPositonAttribute","getAttribLocation","enableVertexAttribArray","colorUniform","getUniformLocation","forEach","objectToDraw","verticesBuffer","colors","i","maxi","length","concat","colorsBuffer","indices","indexBuffer","drawMyObject","object","uniform3f","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","drawArrays","ELEMENT_ARRAY_BUFFER","drawElements","UNSIGNED_SHORT","drawScene","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawObjectOrGroup","item","forEachChild","previousTimestamp","nextFrame","timestamp","window","requestAnimationFrame","progress","innerText","toFixed","toggleCube","toggleXYGrid","toggleSphere","position","top","left"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Sandbox.js"],"sourcesContent":["/**\n * Build out this component to display a “sandbox” scene—see the description below.\n */\nimport { useEffect, useRef, useState } from 'react'\nimport { getGL, initVertexBuffer, initIndexBuffer, initSimpleShaderProgram } from './glsl-utils'\nimport XYGrid from './Geometries/XY-Grid'\nimport Cube from './Geometries/Cube'\nimport Sphere from './Geometries/Sphere'\nimport Group from './Group'\n\nconst VERTEX_SHADER = `\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n\n  attribute vec3 vertexPosition;\n\n  void main(void) {\n    gl_Position = vec4(vertexPosition, 1.0);\n  }\n`\n\nconst FRAGMENT_SHADER = `\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n\n  uniform vec3 color;\n\n  void main(void) {\n    gl_FragColor = vec4(color, 1.0);\n  }\n`\n\nconst CANVAS_WIDTH = 512\nconst CANVAS_HEIGHT = 512\n\nconst FRAMES_PER_SECOND = 60\nconst MILLISECONDS_PER_FRAME = 1000 / FRAMES_PER_SECOND\n\nconst Sandbox = props => {\n  const [useWireframe, setUseWireframe] = useState(false)\n  const [showCube, setShowCube] = useState(false)\n  const [showXYGrid, setShowXYGrid] = useState(true)\n  const [showSphere, setShowSphere] = useState(false)\n  const canvasRef = useRef()\n  const timestampRef = useRef()\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) {\n      return\n    }\n\n    const gl = getGL(canvas)\n\n    if (!gl) {\n      alert('Sorry, Your browser does not support WebGL')\n    }\n\n    gl.enable(gl.DEPTH_TEST)\n    gl.depthFunc(gl.LESS)\n    gl.clearColor(0.0, 0.0, 0.0, 0.0)\n    gl.viewport(0, 0, canvas.width, canvas.height)\n\n    // Shader initialization\n    let abort = false\n    const simpleShaderProgram = initSimpleShaderProgram(\n      gl,\n      VERTEX_SHADER,\n      FRAGMENT_SHADER,\n\n      shader => {\n        abort = true\n        alert('Shader loading error' + gl.getShaderInfoLog(shader))\n      },\n\n      simpleShaderProgram => {\n        abort = true\n        alert('Could not correctly link the shader program')\n      }\n    )\n\n    if (abort) {\n      alert('Fatal errors encountered; we cannot continue.')\n      return\n    }\n\n    gl.useProgram(simpleShaderProgram)\n\n    // Group functionality available to use but unneeded in this example (I will use in future examples when needed)\n    const mainGroup = new Group()\n\n    const objectsToDraw = []\n    // Conditionally add the XY grid\n    if (showXYGrid) {\n      objectsToDraw.push({\n        color: { r: 0.7, g: 0.7, b: 0.7 },\n        vertices: createXYGridVertices(),\n        mode: gl.LINES\n      })\n    }\n\n    // Conditionally add the cube\n    if (showCube) {\n      const cubeObject = cube()\n      objectsToDraw.push({\n        color: { r: 0.7, g: 0.0, b: 0.0 },\n        vertices: useWireframe ? toRawLineArray(cubeObject) : toRawTriangleArray(cubeObject),\n        mode: useWireframe ? gl.LINES : gl.TRIANGLES\n      })\n    }\n\n    const sphereObject = new Sphere(1, 12, 12)\n    if (showSphere) {\n      objectsToDraw.push({\n        color: { r: 0, g: 0.5, b: 1 }, // Example color for the sphere\n        vertices: useWireframe\n          ? sphereObject.toRawLineArray(sphereObject)\n          : sphereObject.toRawTriangleArray(sphereObject),\n        mode: useWireframe ? gl.LINES : gl.TRIANGLES\n      })\n    }\n\n    const vertexPositonAttribute = gl.getAttribLocation(simpleShaderProgram, 'vertexPosition')\n    gl.enableVertexAttribArray(vertexPositonAttribute)\n    const colorUniform = gl.getUniformLocation(simpleShaderProgram, 'color')\n\n    // Load buffers with vertex data\n    objectsToDraw.forEach(objectToDraw => {\n      objectToDraw.verticesBuffer = initVertexBuffer(gl, objectToDraw.vertices)\n\n      if (!objectToDraw.colors) {\n        // If we have a single color, we expand that into an array\n        // of the same color over and over.\n        objectToDraw.colors = []\n        for (let i = 0, maxi = objectToDraw.vertices.length / 3; i < maxi; i += 1) {\n          objectToDraw.colors = objectToDraw.colors.concat(\n            objectToDraw.color.r,\n            objectToDraw.color.g,\n            objectToDraw.color.b\n          )\n        }\n\n        objectToDraw.colorsBuffer = initVertexBuffer(gl, objectToDraw.colors)\n      }\n\n      // if indices exist ...\n      if (objectToDraw.indices) {\n        objectToDraw.indexBuffer = initIndexBuffer(gl, objectToDraw.indices)\n      }\n    })\n\n    // drawing obj by vertices\n    const drawMyObject = object => {\n      gl.uniform3f(colorUniform, object.color.r, object.color.g, object.color.b)\n      gl.bindBuffer(gl.ARRAY_BUFFER, object.verticesBuffer)\n      gl.vertexAttribPointer(vertexPositonAttribute, 3, gl.FLOAT, false, 0, 0)\n\n      if (useWireframe || !object.indexBuffer) {\n        gl.drawArrays(object.mode, 0, object.vertices.length / 3)\n      } else {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, object.indexBuffer)\n        gl.drawElements(object.mode, object.indices.length, gl.UNSIGNED_SHORT, 0)\n      }\n    }\n\n    const drawScene = () => {\n      // Clear the display.\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n      const drawObjectOrGroup = item => {\n        if (item instanceof Group) {\n          item.forEachChild(drawObjectOrGroup) // Recursively draw children\n        } else {\n          drawMyObject(item) // Draw individual object\n        }\n      }\n\n      objectsToDraw.forEach(drawObjectOrGroup)\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, null)\n\n      // might not be needed\n      // gl.flush()\n    }\n\n    let previousTimestamp\n    const nextFrame = timestamp => {\n      // Initialize the timestamp.\n      if (!previousTimestamp) {\n        previousTimestamp = timestamp\n        window.requestAnimationFrame(nextFrame)\n        return\n      }\n\n      // Check if it’s time to advance.\n      const progress = timestamp - previousTimestamp\n      if (progress < MILLISECONDS_PER_FRAME) {\n        // Do nothing if it’s too soon.\n        window.requestAnimationFrame(nextFrame)\n        return\n      }\n\n      // Update objects' positions, animations, etc., here based on elapsed time\n\n      drawScene()\n\n      if (timestampRef.current) {\n        timestampRef.current.innerText = `Timestamp: ${timestamp.toFixed(2)}`\n      }\n\n      // Request the next frame.\n      previousTimestamp = timestamp\n      window.requestAnimationFrame(nextFrame)\n    }\n\n    drawScene()\n\n    window.requestAnimationFrame(nextFrame)\n  }, [useWireframe, showCube, showXYGrid, showSphere])\n\n  // Function to toggle cube visibility\n  const toggleCube = () => setShowCube(!showCube)\n\n  // Function to toggle XY grid visibility\n  const toggleXYGrid = () => setShowXYGrid(!showXYGrid)\n\n  const toggleSphere = () => setShowSphere(!showSphere)\n\n  return (\n    <article>\n      <p>\n        The sandbox scene is where you can demonstrate features/capabilities of your library solely for the purpose of\n        demonstrating them. It doesn’t have to fit any particular pitch or application.\n      </p>\n      <button onClick={() => setUseWireframe(!useWireframe)}>{useWireframe ? 'Show Filled' : 'Show Wireframe'}</button>\n      <button onClick={toggleCube}>{showCube ? 'Remove Cube' : 'Add Cube'}</button> {/* Toggle cube */}\n      <button onClick={toggleXYGrid}>{showXYGrid ? 'Remove XY Grid' : 'Add XY Grid'}</button> {/* Toggle XY grid */}\n      <button onClick={toggleSphere}>{showSphere ? 'Remove Sphere' : 'Add Sphere'}</button>\n      <div style={{ position: 'relative' }}>\n        <canvas width={CANVAS_WIDTH} height={CANVAS_HEIGHT} ref={canvasRef} />\n        <div ref={timestampRef} style={{ position: 'absolute', top: '7px', left: '10px', color: 'black' }}>\n          Timestamp: 0.00\n        </div>\n      </div>\n    </article>\n  )\n}\n\nexport default Sandbox\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}