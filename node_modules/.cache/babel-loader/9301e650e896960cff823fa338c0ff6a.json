{"ast":null,"code":"/*\n * This is a set of utility functions that are common across many types of WebGL programs.\n * Don’t feel beholden to how this is structured---feel free to take it apart and rearrange\n * things into something that makes more sense to you.\n */\n\n/**\n * Returns the WebGL rendering context.\n */\nconst getGL = canvas => canvas.getContext('webgl2');\n\n/**\n * Initializes a vertex buffer for the given array of vertices.\n */\nconst initVertexBuffer = (gl, vertices) => {\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n  return buffer;\n};\nconst initIndexBuffer = (gl, indices) => {};\n\n/**\n * Sets up a GLSL shader of the given type.\n */\nconst compileShader = (gl, shaderSource, shaderType, compileError) => {\n  const shader = gl.createShader(shaderType);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n\n  // Check for an error.\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    if (compileError) {\n      compileError(shader);\n    }\n    return null;\n  } else {\n    return shader;\n  }\n};\n\n/**\n * Links a GLSL program.\n */\nconst linkShaderProgram = (gl, vertexShader, fragmentShader) => {\n  const shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n  return shaderProgram;\n};\n\n/**\n * Initializes a simple shader program, using these parameters:\n *\n * - gl: The WebGL context to use.\n * - vertexShaderSource: The vertex shader source code.\n * - fragmentShaderSource: The fragment shader source code.\n *\n * Optional parameters:\n *\n * - compileError: The function to call if a shader does not compile.\n * - linkError: The function to call if the program does not link.\n */\nconst initSimpleShaderProgram = (gl, vertexShaderSource, fragmentShaderSource, compileError, linkError) => {\n  const vertexShader = compileShader(gl, vertexShaderSource, gl.VERTEX_SHADER, compileError);\n  const fragmentShader = compileShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER, compileError);\n\n  // If either shader is null, we just bail out.  An error would have\n  // been reported to the compileError function.\n  if (!vertexShader || !fragmentShader) {\n    return null;\n  }\n\n  // Link the shader program.\n  const shaderProgram = linkShaderProgram(gl, vertexShader, fragmentShader);\n  if (gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    return shaderProgram;\n  }\n\n  // If we get here, something must have gone wrong.\n  if (linkError) {\n    linkError(shaderProgram);\n  }\n  return null;\n};\nexport { getGL, initVertexBuffer, compileShader, linkShaderProgram, initSimpleShaderProgram };","map":{"version":3,"names":["getGL","canvas","getContext","initVertexBuffer","gl","vertices","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","initIndexBuffer","indices","compileShader","shaderSource","shaderType","compileError","shader","createShader","getShaderParameter","COMPILE_STATUS","linkShaderProgram","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","linkProgram","initSimpleShaderProgram","vertexShaderSource","fragmentShaderSource","linkError","VERTEX_SHADER","FRAGMENT_SHADER","getProgramParameter","LINK_STATUS"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/glsl-utils.js"],"sourcesContent":["/*\n * This is a set of utility functions that are common across many types of WebGL programs.\n * Don’t feel beholden to how this is structured---feel free to take it apart and rearrange\n * things into something that makes more sense to you.\n */\n\n/**\n * Returns the WebGL rendering context.\n */\nconst getGL = canvas => canvas.getContext('webgl2')\n\n/**\n * Initializes a vertex buffer for the given array of vertices.\n */\nconst initVertexBuffer = (gl, vertices) => {\n  const buffer = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\n  return buffer\n}\n\nconst initIndexBuffer = (gl, indices) => {\n  \n\n}\n\n\n/**\n * Sets up a GLSL shader of the given type.\n */\nconst compileShader = (gl, shaderSource, shaderType, compileError) => {\n  const shader = gl.createShader(shaderType)\n  gl.shaderSource(shader, shaderSource)\n  gl.compileShader(shader)\n\n  // Check for an error.\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    if (compileError) {\n      compileError(shader)\n    }\n\n    return null\n  } else {\n    return shader\n  }\n}\n\n/**\n * Links a GLSL program.\n */\nconst linkShaderProgram = (gl, vertexShader, fragmentShader) => {\n  const shaderProgram = gl.createProgram()\n  gl.attachShader(shaderProgram, vertexShader)\n  gl.attachShader(shaderProgram, fragmentShader)\n  gl.linkProgram(shaderProgram)\n  return shaderProgram\n}\n\n/**\n * Initializes a simple shader program, using these parameters:\n *\n * - gl: The WebGL context to use.\n * - vertexShaderSource: The vertex shader source code.\n * - fragmentShaderSource: The fragment shader source code.\n *\n * Optional parameters:\n *\n * - compileError: The function to call if a shader does not compile.\n * - linkError: The function to call if the program does not link.\n */\nconst initSimpleShaderProgram = (gl, vertexShaderSource, fragmentShaderSource, compileError, linkError) => {\n  const vertexShader = compileShader(gl, vertexShaderSource, gl.VERTEX_SHADER, compileError)\n  const fragmentShader = compileShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER, compileError)\n\n  // If either shader is null, we just bail out.  An error would have\n  // been reported to the compileError function.\n  if (!vertexShader || !fragmentShader) {\n    return null\n  }\n\n  // Link the shader program.\n  const shaderProgram = linkShaderProgram(gl, vertexShader, fragmentShader)\n  if (gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    return shaderProgram\n  }\n\n  // If we get here, something must have gone wrong.\n  if (linkError) {\n    linkError(shaderProgram)\n  }\n\n  return null\n}\n\nexport { getGL, initVertexBuffer, compileShader, linkShaderProgram, initSimpleShaderProgram }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,KAAK,GAAGC,MAAM,IAAIA,MAAM,CAACC,UAAU,CAAC,QAAQ,CAAC;;AAEnD;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,CAACC,EAAE,EAAEC,QAAQ,KAAK;EACzC,MAAMC,MAAM,GAAGF,EAAE,CAACG,YAAY,EAAE;EAChCH,EAAE,CAACI,UAAU,CAACJ,EAAE,CAACK,YAAY,EAAEH,MAAM,CAAC;EACtCF,EAAE,CAACM,UAAU,CAACN,EAAE,CAACK,YAAY,EAAE,IAAIE,YAAY,CAACN,QAAQ,CAAC,EAAED,EAAE,CAACQ,WAAW,CAAC;EAC1E,OAAON,MAAM;AACf,CAAC;AAED,MAAMO,eAAe,GAAG,CAACT,EAAE,EAAEU,OAAO,KAAK,CAGzC,CAAC;;AAGD;AACA;AACA;AACA,MAAMC,aAAa,GAAG,CAACX,EAAE,EAAEY,YAAY,EAAEC,UAAU,EAAEC,YAAY,KAAK;EACpE,MAAMC,MAAM,GAAGf,EAAE,CAACgB,YAAY,CAACH,UAAU,CAAC;EAC1Cb,EAAE,CAACY,YAAY,CAACG,MAAM,EAAEH,YAAY,CAAC;EACrCZ,EAAE,CAACW,aAAa,CAACI,MAAM,CAAC;;EAExB;EACA,IAAI,CAACf,EAAE,CAACiB,kBAAkB,CAACF,MAAM,EAAEf,EAAE,CAACkB,cAAc,CAAC,EAAE;IACrD,IAAIJ,YAAY,EAAE;MAChBA,YAAY,CAACC,MAAM,CAAC;IACtB;IAEA,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAOA,MAAM;EACf;AACF,CAAC;;AAED;AACA;AACA;AACA,MAAMI,iBAAiB,GAAG,CAACnB,EAAE,EAAEoB,YAAY,EAAEC,cAAc,KAAK;EAC9D,MAAMC,aAAa,GAAGtB,EAAE,CAACuB,aAAa,EAAE;EACxCvB,EAAE,CAACwB,YAAY,CAACF,aAAa,EAAEF,YAAY,CAAC;EAC5CpB,EAAE,CAACwB,YAAY,CAACF,aAAa,EAAED,cAAc,CAAC;EAC9CrB,EAAE,CAACyB,WAAW,CAACH,aAAa,CAAC;EAC7B,OAAOA,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,uBAAuB,GAAG,CAAC1B,EAAE,EAAE2B,kBAAkB,EAAEC,oBAAoB,EAAEd,YAAY,EAAEe,SAAS,KAAK;EACzG,MAAMT,YAAY,GAAGT,aAAa,CAACX,EAAE,EAAE2B,kBAAkB,EAAE3B,EAAE,CAAC8B,aAAa,EAAEhB,YAAY,CAAC;EAC1F,MAAMO,cAAc,GAAGV,aAAa,CAACX,EAAE,EAAE4B,oBAAoB,EAAE5B,EAAE,CAAC+B,eAAe,EAAEjB,YAAY,CAAC;;EAEhG;EACA;EACA,IAAI,CAACM,YAAY,IAAI,CAACC,cAAc,EAAE;IACpC,OAAO,IAAI;EACb;;EAEA;EACA,MAAMC,aAAa,GAAGH,iBAAiB,CAACnB,EAAE,EAAEoB,YAAY,EAAEC,cAAc,CAAC;EACzE,IAAIrB,EAAE,CAACgC,mBAAmB,CAACV,aAAa,EAAEtB,EAAE,CAACiC,WAAW,CAAC,EAAE;IACzD,OAAOX,aAAa;EACtB;;EAEA;EACA,IAAIO,SAAS,EAAE;IACbA,SAAS,CAACP,aAAa,CAAC;EAC1B;EAEA,OAAO,IAAI;AACb,CAAC;AAED,SAAS1B,KAAK,EAAEG,gBAAgB,EAAEY,aAAa,EAAEQ,iBAAiB,EAAEO,uBAAuB"},"metadata":{},"sourceType":"module"}