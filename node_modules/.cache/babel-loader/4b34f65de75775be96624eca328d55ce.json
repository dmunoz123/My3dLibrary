{"ast":null,"code":"export default class Sphere extends Tran {\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let widthSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;\n    let heightSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;\n    this.radius = radius;\n    this.widthSegments = widthSegments;\n    this.heightSegments = heightSegments;\n    this.vertices = [];\n    this.indices = [];\n    this.generateSphere();\n  }\n  generateSphere() {\n    const phiStart = 0;\n    const phiLength = Math.PI * 2;\n    const thetaStart = 0;\n    const thetaLength = Math.PI;\n    for (let y = 0; y <= this.heightSegments; y++) {\n      const verticesRow = [];\n      const v = y / this.heightSegments;\n      for (let x = 0; x <= this.widthSegments; x++) {\n        const u = x / this.widthSegments;\n        const xpos = this.radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        const ypos = this.radius * Math.cos(thetaStart + v * thetaLength);\n        const zpos = this.radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        this.vertices.push(xpos, ypos, zpos);\n        verticesRow.push(this.vertices.length / 3 - 1);\n      }\n      if (y > 0) {\n        for (let x = 0; x < this.widthSegments; x++) {\n          const a = verticesRow[x];\n          const b = verticesRow[x + 1];\n          const c = verticesRow[x + 1] - (this.widthSegments + 1);\n          const d = verticesRow[x] - (this.widthSegments + 1);\n          this.indices.push(a, d, b);\n          this.indices.push(b, d, c);\n        }\n      }\n    }\n  }\n  toRawTriangleArray() {\n    const result = [];\n    for (let i = 0; i < this.indices.length; i += 3) {\n      for (let j = 0; j < 3; j++) {\n        const idx = this.indices[i + j] * 3;\n        result.push(this.vertices[idx], this.vertices[idx + 1], this.vertices[idx + 2]);\n      }\n    }\n    return result;\n  }\n  toRawLineArray() {\n    const result = [];\n    for (let i = 0; i < this.indices.length; i += 3) {\n      for (let j = 0; j < 3; j++) {\n        const idx1 = this.indices[i + j] * 3;\n        const idx2 = this.indices[i + (j + 1) % 3] * 3;\n        // Add line segment between vertices[idx1] and vertices[idx2]\n        result.push(this.vertices[idx1], this.vertices[idx1 + 1], this.vertices[idx1 + 2], this.vertices[idx2], this.vertices[idx2 + 1], this.vertices[idx2 + 2]);\n      }\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["Sphere","Tran","constructor","radius","widthSegments","heightSegments","vertices","indices","generateSphere","phiStart","phiLength","Math","PI","thetaStart","thetaLength","y","verticesRow","v","x","u","xpos","cos","sin","ypos","zpos","push","length","a","b","c","d","toRawTriangleArray","result","i","j","idx","toRawLineArray","idx1","idx2"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Geometries/Sphere.js"],"sourcesContent":["export default class Sphere extends Tran {\n  constructor(radius = 1, widthSegments = 9, heightSegments = 6) {\n    this.radius = radius\n    this.widthSegments = widthSegments\n    this.heightSegments = heightSegments\n    this.vertices = []\n    this.indices = []\n    this.generateSphere()\n  }\n\n  generateSphere() {\n    const phiStart = 0\n    const phiLength = Math.PI * 2\n    const thetaStart = 0\n    const thetaLength = Math.PI\n\n    for (let y = 0; y <= this.heightSegments; y++) {\n      const verticesRow = []\n      const v = y / this.heightSegments\n\n      for (let x = 0; x <= this.widthSegments; x++) {\n        const u = x / this.widthSegments\n\n        const xpos = this.radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\n        const ypos = this.radius * Math.cos(thetaStart + v * thetaLength)\n        const zpos = this.radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\n\n        this.vertices.push(xpos, ypos, zpos)\n        verticesRow.push(this.vertices.length / 3 - 1)\n      }\n\n      if (y > 0) {\n        for (let x = 0; x < this.widthSegments; x++) {\n          const a = verticesRow[x]\n          const b = verticesRow[x + 1]\n          const c = verticesRow[x + 1] - (this.widthSegments + 1)\n          const d = verticesRow[x] - (this.widthSegments + 1)\n\n          this.indices.push(a, d, b)\n          this.indices.push(b, d, c)\n        }\n      }\n    }\n  }\n\n  toRawTriangleArray() {\n    const result = []\n    for (let i = 0; i < this.indices.length; i += 3) {\n      for (let j = 0; j < 3; j++) {\n        const idx = this.indices[i + j] * 3\n        result.push(this.vertices[idx], this.vertices[idx + 1], this.vertices[idx + 2])\n      }\n    }\n    return result\n  }\n\n  toRawLineArray() {\n    const result = []\n    for (let i = 0; i < this.indices.length; i += 3) {\n      for (let j = 0; j < 3; j++) {\n        const idx1 = this.indices[i + j] * 3\n        const idx2 = this.indices[i + ((j + 1) % 3)] * 3\n        // Add line segment between vertices[idx1] and vertices[idx2]\n        result.push(\n          this.vertices[idx1],\n          this.vertices[idx1 + 1],\n          this.vertices[idx1 + 2],\n          this.vertices[idx2],\n          this.vertices[idx2 + 1],\n          this.vertices[idx2 + 2]\n        )\n      }\n    }\n    return result\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}