{"ast":null,"code":"export default class Matrix {\n  constructor() {\n    this.data = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n  }\n  reset() {\n    for (let i = 0; i < 16; i++) {\n      this.data[i] = i % 5 === 0 ? 1 : 0; // Only diagonal elements are 1\n    }\n  }\n\n  multiply(matrix) {\n    const result = new Float32Array(16);\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        let sum = 0;\n        for (let k = 0; k < 4; k++) {\n          sum += this.data[row * 4 + k] * matrix.data[k * 4 + col];\n        }\n        result[row * 4 + col] = sum;\n      }\n    }\n    this.data.set(result);\n    return this;\n  }\n  translate(tx, ty, tz) {\n    for (let i = 0; i < 4; i++) {\n      this.data[12 + i] += this.data[i] * tx + this.data[4 + i] * ty + this.data[8 + i] * tz;\n    }\n    return this;\n  }\n  scale(sx, sy, sz) {\n    for (let i = 0; i < 4; i++) {\n      this.data[i] *= sx;\n      this.data[4 + i] *= sy;\n      this.data[8 + i] *= sz;\n    }\n    return this;\n  }\n  rotate(angle, x, y, z) {\n    const rad = Math.PI / 180 * angle;\n    const s = Math.sin(rad);\n    const c = Math.cos(rad);\n    const t = 1 - c;\n    const norm = Math.sqrt(x * x + y * y + z * z);\n    x /= norm;\n    y /= norm;\n    z /= norm;\n    const rx = x * x * t + c;\n    const ry = y * x * t + z * s;\n    const rz = z * x * t - y * s;\n    const ux = x * y * t - z * s;\n    const uy = y * y * t + c;\n    const uz = z * y * t + x * s;\n    const vx = x * z * t + y * s;\n    const vy = y * z * t - x * s;\n    const vz = z * z * t + c;\n    const result = new Float32Array(16);\n    for (let i = 0; i < 4; i++) {\n      result[i] = this.data[i] * rx + this.data[4 + i] * ux + this.data[8 + i] * vx;\n      result[4 + i] = this.data[i] * ry + this.data[4 + i] * uy + this.data[8 + i] * vy;\n      result[8 + i] = this.data[i] * rz + this.data[4 + i] * uz + this.data[8 + i] * vz;\n      result[12 + i] = this.data[12 + i];\n    }\n    this.data.set(result);\n    return this;\n  }\n  orthographic(left, right, bottom, top, near, far) {\n    this.reset();\n    this.data[0] = 2 / (right - left);\n    this.data[5] = 2 / (top - bottom);\n    this.data[10] = -2 / (far - near);\n    this.data[12] = -(right + left) / (right - left);\n    this.data[13] = -(top + bottom) / (top - bottom);\n    this.data[14] = -(far + near) / (far - near);\n    return this;\n  }\n  perspective(fov, aspect, near, far) {\n    const f = 1.0 / Math.tan(fov / 2);\n    this.reset();\n    this.data[0] = f / aspect;\n    this.data[5] = f;\n    this.data[10] = (far + near) / (near - far);\n    this.data[11] = -1;\n    this.data[14] = 2 * far * near / (near - far);\n    this.data[15] = 0;\n    return this;\n  }\n  toWebGL() {\n    return new Float32Array(this.data);\n  }\n}","map":{"version":3,"names":["Matrix","constructor","data","Float32Array","reset","i","multiply","matrix","result","row","col","sum","k","set","translate","tx","ty","tz","scale","sx","sy","sz","rotate","angle","x","y","z","rad","Math","PI","s","sin","c","cos","t","norm","sqrt","rx","ry","rz","ux","uy","uz","vx","vy","vz","orthographic","left","right","bottom","top","near","far","perspective","fov","aspect","f","tan","toWebGL"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Matrix/Matrix.js"],"sourcesContent":["export default class Matrix {\n  constructor() {\n    this.data = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])\n  }\n\n  reset() {\n    for (let i = 0; i < 16; i++) {\n      this.data[i] = i % 5 === 0 ? 1 : 0 // Only diagonal elements are 1\n    }\n  }\n\n  multiply(matrix) {\n    const result = new Float32Array(16)\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        let sum = 0\n        for (let k = 0; k < 4; k++) {\n          sum += this.data[row * 4 + k] * matrix.data[k * 4 + col]\n        }\n        result[row * 4 + col] = sum\n      }\n    }\n    this.data.set(result)\n    return this\n  }\n\n  translate(tx, ty, tz) {\n    for (let i = 0; i < 4; i++) {\n      this.data[12 + i] += this.data[i] * tx + this.data[4 + i] * ty + this.data[8 + i] * tz\n    }\n    return this\n  }\n\n  scale(sx, sy, sz) {\n    for (let i = 0; i < 4; i++) {\n      this.data[i] *= sx\n      this.data[4 + i] *= sy\n      this.data[8 + i] *= sz\n    }\n    return this\n  }\n\n  rotate(angle, x, y, z) {\n    const rad = (Math.PI / 180) * angle\n    const s = Math.sin(rad)\n    const c = Math.cos(rad)\n    const t = 1 - c\n    const norm = Math.sqrt(x * x + y * y + z * z)\n    x /= norm\n    y /= norm\n    z /= norm\n\n    const rx = x * x * t + c\n    const ry = y * x * t + z * s\n    const rz = z * x * t - y * s\n    const ux = x * y * t - z * s\n    const uy = y * y * t + c\n    const uz = z * y * t + x * s\n    const vx = x * z * t + y * s\n    const vy = y * z * t - x * s\n    const vz = z * z * t + c\n\n    const result = new Float32Array(16)\n    for (let i = 0; i < 4; i++) {\n      result[i] = this.data[i] * rx + this.data[4 + i] * ux + this.data[8 + i] * vx\n      result[4 + i] = this.data[i] * ry + this.data[4 + i] * uy + this.data[8 + i] * vy\n      result[8 + i] = this.data[i] * rz + this.data[4 + i] * uz + this.data[8 + i] * vz\n      result[12 + i] = this.data[12 + i]\n    }\n    this.data.set(result)\n    return this\n  }\n\n  orthographic(left, right, bottom, top, near, far) {\n    this.reset()\n    this.data[0] = 2 / (right - left)\n    this.data[5] = 2 / (top - bottom)\n    this.data[10] = -2 / (far - near)\n    this.data[12] = -(right + left) / (right - left)\n    this.data[13] = -(top + bottom) / (top - bottom)\n    this.data[14] = -(far + near) / (far - near)\n    return this\n  }\n\n  perspective(fov, aspect, near, far) {\n    const f = 1.0 / Math.tan(fov / 2)\n    this.reset()\n    this.data[0] = f / aspect\n    this.data[5] = f\n    this.data[10] = (far + near) / (near - far)\n    this.data[11] = -1\n    this.data[14] = (2 * far * near) / (near - far)\n    this.data[15] = 0\n    return this\n  }\n\n  toWebGL() {\n    return new Float32Array(this.data)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}