{"ast":null,"code":"import { Transformable } from '../Group';\nconst cube = () => {\n  return {\n    vertices: [[-0.5, -0.5, -0.5],\n    // 0\n    [0.5, -0.5, -0.5],\n    // 1\n    [0.5, 0.5, -0.5],\n    // 2\n    [-0.5, 0.5, -0.5],\n    // 3\n    [-0.5, -0.5, 0.5],\n    // 4\n    [0.5, -0.5, 0.5],\n    // 5\n    [0.5, 0.5, 0.5],\n    // 6\n    [-0.5, 0.5, 0.5] // 7\n    ],\n\n    facesByIndex: [[0, 3, 2],\n    // back\n    [0, 2, 1],\n    // back\n    [1, 2, 6],\n    // right\n    [1, 6, 5],\n    // right\n    [4, 6, 7],\n    // front\n    [4, 5, 6],\n    // front\n    [0, 7, 3],\n    // left\n    [0, 4, 7],\n    // left\n    [4, 1, 5],\n    // Bottom face\n    [4, 0, 1],\n    // Bottom face\n    [3, 7, 6],\n    // Top face\n    [3, 6, 2] // Top face\n    ]\n  };\n};\n\n// ! Credit to professor dondi\n/**\n * Utility function for turning our nascent geometry object into a “raw” coordinate array\n * arranged as triangles.\n */\nconst toRawTriangleArray = protoGeometry => {\n  const result = [];\n  protoGeometry.facesByIndex.forEach(face => {\n    face.forEach(vertexIndex => {\n      result.push(...protoGeometry.vertices[vertexIndex]);\n    });\n  });\n  return result;\n};\n\n/*\n * Utility function for turning indexed vertices into a “raw” coordinate array\n * arranged as line segments.\n */\nconst toRawLineArray = protoGeometry => {\n  const result = [];\n  protoGeometry.facesByIndex.forEach(face => {\n    // Oddly enough, the inner loop here is clearer as a `for` loop because we\n    // need to access the current vertex index and the one after that (wrapping\n    // around once we get to the end).\n    for (let i = 0, maxI = face.length; i < maxI; i += 1) {\n      // “Connect the dots.”\n      result.push(...protoGeometry.vertices[face[i]], ...protoGeometry.vertices[face[(i + 1) % maxI]] // Lets us wrap around to 0.\n      );\n    }\n  });\n\n  return result;\n};\nclass Cube extends Transformable {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    super();\n    this.size = size;\n  }\n}","map":{"version":3,"names":["Transformable","cube","vertices","facesByIndex","toRawTriangleArray","protoGeometry","result","forEach","face","vertexIndex","push","toRawLineArray","i","maxI","length","Cube","constructor","size"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Geometries/Cube.js"],"sourcesContent":["import { Transformable } from '../Group'\n\nconst cube = () => {\n  return {\n    vertices: [\n      [-0.5, -0.5, -0.5], // 0\n      [0.5, -0.5, -0.5], // 1\n      [0.5, 0.5, -0.5], // 2\n      [-0.5, 0.5, -0.5], // 3\n      [-0.5, -0.5, 0.5], // 4\n      [0.5, -0.5, 0.5], // 5\n      [0.5, 0.5, 0.5], // 6\n      [-0.5, 0.5, 0.5] // 7\n    ],\n\n    facesByIndex: [\n      [0, 3, 2], // back\n      [0, 2, 1], // back\n      [1, 2, 6], // right\n      [1, 6, 5], // right\n      [4, 6, 7], // front\n      [4, 5, 6], // front\n      [0, 7, 3], // left\n      [0, 4, 7], // left\n      [4, 1, 5], // Bottom face\n      [4, 0, 1], // Bottom face\n      [3, 7, 6], // Top face\n      [3, 6, 2] // Top face\n    ]\n  }\n}\n\n// ! Credit to professor dondi\n/**\n * Utility function for turning our nascent geometry object into a “raw” coordinate array\n * arranged as triangles.\n */\nconst toRawTriangleArray = protoGeometry => {\n  const result = []\n\n  protoGeometry.facesByIndex.forEach(face => {\n    face.forEach(vertexIndex => {\n      result.push(...protoGeometry.vertices[vertexIndex])\n    })\n  })\n\n  return result\n}\n\n/*\n * Utility function for turning indexed vertices into a “raw” coordinate array\n * arranged as line segments.\n */\nconst toRawLineArray = protoGeometry => {\n  const result = []\n\n  protoGeometry.facesByIndex.forEach(face => {\n    // Oddly enough, the inner loop here is clearer as a `for` loop because we\n    // need to access the current vertex index and the one after that (wrapping\n    // around once we get to the end).\n    for (let i = 0, maxI = face.length; i < maxI; i += 1) {\n      // “Connect the dots.”\n      result.push(\n        ...protoGeometry.vertices[face[i]],\n        ...protoGeometry.vertices[face[(i + 1) % maxI]] // Lets us wrap around to 0.\n      )\n    }\n  })\n\n  return result\n}\n\nclass Cube extends Transformable {\n  constructor(size = 1) {\n    super()\n    this.size = size \n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}