{"ast":null,"code":"import { Transformable } from '../Group';\nexport default class XYGrid extends Transformable {\n  constructor() {\n    let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    let step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super();\n    this.gridSize = gridSize;\n    this.step = step;\n    this.vertices = this.generateGridVertices(gridSize, step);\n  }\n}\nconst createXYGridVertices = function () {\n  let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n  let step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const vertices = [];\n  const lines = [];\n\n  // Generating vertical lines\n  for (let x = -gridSize; x <= gridSize; x += step) {\n    vertices.push(x, -gridSize, 0);\n    vertices.push(x, gridSize, 0);\n    lines.push({\n      start: [x, -gridSize, 0],\n      end: [x, gridSize, 0]\n    });\n  }\n  for (let y = -gridSize; y <= gridSize; y += step) {\n    vertices.push(-gridSize, y, 0);\n    vertices.push(gridSize, y, 0);\n    lines.push({\n      start: [-gridSize, y, 0],\n      end: [gridSize, y, 0]\n    });\n  }\n  return vertices;\n};","map":{"version":3,"names":["Transformable","XYGrid","constructor","gridSize","step","vertices","generateGridVertices","createXYGridVertices","lines","x","push","start","end","y"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Geometries/XY-Grid.js"],"sourcesContent":["import { Transformable } from '../Group'\n\nexport default class XYGrid extends Transformable {\n  constructor(gridSize = 10, step = 1) {\n    super()\n    this.gridSize = gridSize\n    this.step = step\n    this.vertices = this.generateGridVertices(gridSize, step)\n  }\n}\nconst createXYGridVertices = (gridSize = 10, step = 1) => {\n  const vertices = []\n  const lines = []\n\n  // Generating vertical lines\n  for (let x = -gridSize; x <= gridSize; x += step) {\n    vertices.push(x, -gridSize, 0)\n    vertices.push(x, gridSize, 0)\n\n    lines.push({ start: [x, -gridSize, 0], end: [x, gridSize, 0] })\n  }\n\n  for (let y = -gridSize; y <= gridSize; y += step) {\n    vertices.push(-gridSize, y, 0)\n    vertices.push(gridSize, y, 0)\n\n    lines.push({ start: [-gridSize, y, 0], end: [gridSize, y, 0] })\n  }\n\n  return vertices\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,UAAU;AAExC,eAAe,MAAMC,MAAM,SAASD,aAAa,CAAC;EAChDE,WAAW,GAA0B;IAAA,IAAzBC,QAAQ,uEAAG,EAAE;IAAA,IAAEC,IAAI,uEAAG,CAAC;IACjC,KAAK,EAAE;IACP,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,oBAAoB,CAACH,QAAQ,EAAEC,IAAI,CAAC;EAC3D;AACF;AACA,MAAMG,oBAAoB,GAAG,YAA6B;EAAA,IAA5BJ,QAAQ,uEAAG,EAAE;EAAA,IAAEC,IAAI,uEAAG,CAAC;EACnD,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAMG,KAAK,GAAG,EAAE;;EAEhB;EACA,KAAK,IAAIC,CAAC,GAAG,CAACN,QAAQ,EAAEM,CAAC,IAAIN,QAAQ,EAAEM,CAAC,IAAIL,IAAI,EAAE;IAChDC,QAAQ,CAACK,IAAI,CAACD,CAAC,EAAE,CAACN,QAAQ,EAAE,CAAC,CAAC;IAC9BE,QAAQ,CAACK,IAAI,CAACD,CAAC,EAAEN,QAAQ,EAAE,CAAC,CAAC;IAE7BK,KAAK,CAACE,IAAI,CAAC;MAAEC,KAAK,EAAE,CAACF,CAAC,EAAE,CAACN,QAAQ,EAAE,CAAC,CAAC;MAAES,GAAG,EAAE,CAACH,CAAC,EAAEN,QAAQ,EAAE,CAAC;IAAE,CAAC,CAAC;EACjE;EAEA,KAAK,IAAIU,CAAC,GAAG,CAACV,QAAQ,EAAEU,CAAC,IAAIV,QAAQ,EAAEU,CAAC,IAAIT,IAAI,EAAE;IAChDC,QAAQ,CAACK,IAAI,CAAC,CAACP,QAAQ,EAAEU,CAAC,EAAE,CAAC,CAAC;IAC9BR,QAAQ,CAACK,IAAI,CAACP,QAAQ,EAAEU,CAAC,EAAE,CAAC,CAAC;IAE7BL,KAAK,CAACE,IAAI,CAAC;MAAEC,KAAK,EAAE,CAAC,CAACR,QAAQ,EAAEU,CAAC,EAAE,CAAC,CAAC;MAAED,GAAG,EAAE,CAACT,QAAQ,EAAEU,CAAC,EAAE,CAAC;IAAE,CAAC,CAAC;EACjE;EAEA,OAAOR,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module"}