{"ast":null,"code":"var _jsxFileName = \"/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Sandbox.js\",\n  _s2 = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { getGL, initVertexBuffer, initIndexBuffer, initSimpleShaderProgram } from './glsl-utils';\nimport XYGrid from './Geometries/XY-Grid';\nimport Cube from './Geometries/Cube';\nimport Sphere from './Geometries/Sphere';\nimport { Group } from './Group';\nimport Matrix from './Matrix/Matrix';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VERTEX_SHADER = `\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n\n  attribute vec3 vertexPosition;\n\n  void main(void) {\n    gl_Position = vec4(vertexPosition, 1.0);\n  }\n`;\nconst FRAGMENT_SHADER = `\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n\n  uniform vec3 color;\n\n  void main(void) {\n    gl_FragColor = vec4(color, 1.0);\n  }\n`;\nconst CANVAS_WIDTH = 512;\nconst CANVAS_HEIGHT = 512;\nconst Sandbox = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [useWireframe, setUseWireframe] = useState(false);\n  const [showCube, setShowCube] = useState(false);\n  const [showXYGrid, setShowXYGrid] = useState(true);\n  const [showSphere, setShowSphere] = useState(false);\n  const [groups, setGroups] = useState([]);\n  const canvasRef = useRef();\n  _s(useEffect(_s(() => {\n    _s();\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const gl = getGL(canvas);\n    if (!gl) {\n      alert('Sorry, your browser does not support WebGL');\n      return;\n    }\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.viewport(0, 0, canvas.width, canvas.height);\n    const simpleShaderProgram = initSimpleShaderProgram(gl, VERTEX_SHADER, FRAGMENT_SHADER);\n    if (!simpleShaderProgram) {\n      alert('Shader initialization failed.');\n      return;\n    }\n    gl.useProgram(simpleShaderProgram);\n    const vertexPositionAttribute = gl.getAttribLocation(simpleShaderProgram, 'vertexPosition');\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n    const colorUniform = gl.getUniformLocation(simpleShaderProgram, 'color');\n    const drawScene = () => {\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      const objectsToDraw = [];\n      if (showXYGrid) {\n        objectsToDraw.push(new XYGrid());\n      }\n      if (showCube) {\n        objectsToDraw.push(new Cube(1));\n      }\n      if (showSphere) {\n        objectsToDraw.push(new Sphere());\n      }\n      objectsToDraw.forEach(object => {\n        const vertices = useWireframe ? object.toRawLineArray() : object.toRawTriangleArray();\n        const verticesBuffer = initVertexBuffer(gl, vertices);\n        const color = object.color;\n        const colors = new Array(vertices.length / 3).fill([color.r, color.g, color.b]).flat();\n        const colorsBuffer = initVertexBuffer(gl, colors);\n        gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);\n        gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n        gl.uniform3f(colorUniform, color.r, color.g, color.b);\n        if (useWireframe || !object.indices) {\n          gl.drawArrays(gl.LINES, 0, vertices.length / 3);\n        } else {\n          const indexBuffer = initIndexBuffer(gl, object.indices);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n          gl.drawElements(gl.TRIANGLES, object.indices.length, gl.UNSIGNED_SHORT, 0);\n        }\n      });\n    };\n    drawScene();\n  }, \"ZdQBZ3rq7bWAAMQq6hlVCmYF0jM=\", false, function () {\n    return [gl.useProgram];\n  }), [useWireframe, showCube, showXYGrid, showSphere]), \"ZdQBZ3rq7bWAAMQq6hlVCmYF0jM=\", true);\n  const toggleCube = () => setShowCube(!showCube);\n  const toggleXYGrid = () => setShowXYGrid(!showXYGrid);\n  const toggleSphere = () => setShowSphere(!showSphere);\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The sandbox scene is where you can demonstrate features/capabilities of your library.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setUseWireframe(!useWireframe),\n      children: useWireframe ? 'Show Filled' : 'Show Wireframe'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCube,\n      children: showCube ? 'Remove Cube' : 'Add Cube'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleXYGrid,\n      children: showXYGrid ? 'Remove XY Grid' : 'Add XY Grid'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleSphere,\n      children: showSphere ? 'Remove Sphere' : 'Add Sphere'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s2(Sandbox, \"Kn+x3SojK1NwIRkREg7bvYeH2qg=\");\n_c = Sandbox;\nexport default Sandbox;\nvar _c;\n$RefreshReg$(_c, \"Sandbox\");","map":{"version":3,"names":["useEffect","useRef","useState","getGL","initVertexBuffer","initIndexBuffer","initSimpleShaderProgram","XYGrid","Cube","Sphere","Group","Matrix","VERTEX_SHADER","FRAGMENT_SHADER","CANVAS_WIDTH","CANVAS_HEIGHT","Sandbox","useWireframe","setUseWireframe","showCube","setShowCube","showXYGrid","setShowXYGrid","showSphere","setShowSphere","groups","setGroups","canvasRef","canvas","current","gl","alert","enable","DEPTH_TEST","depthFunc","LESS","clearColor","viewport","width","height","simpleShaderProgram","useProgram","vertexPositionAttribute","getAttribLocation","enableVertexAttribArray","colorUniform","getUniformLocation","drawScene","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","objectsToDraw","push","forEach","object","vertices","toRawLineArray","toRawTriangleArray","verticesBuffer","color","colors","Array","length","fill","r","g","b","flat","colorsBuffer","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","uniform3f","indices","drawArrays","LINES","indexBuffer","ELEMENT_ARRAY_BUFFER","drawElements","TRIANGLES","UNSIGNED_SHORT","toggleCube","toggleXYGrid","toggleSphere"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Sandbox.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { getGL, initVertexBuffer, initIndexBuffer, initSimpleShaderProgram } from './glsl-utils';\nimport XYGrid from './Geometries/XY-Grid';\nimport Cube from './Geometries/Cube';\nimport Sphere from './Geometries/Sphere';\nimport { Group } from './Group';\nimport Matrix from './Matrix/Matrix';\n\nconst VERTEX_SHADER = `\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n\n  attribute vec3 vertexPosition;\n\n  void main(void) {\n    gl_Position = vec4(vertexPosition, 1.0);\n  }\n`;\n\nconst FRAGMENT_SHADER = `\n  #ifdef GL_ES\n  precision highp float;\n  #endif\n\n  uniform vec3 color;\n\n  void main(void) {\n    gl_FragColor = vec4(color, 1.0);\n  }\n`;\n\nconst CANVAS_WIDTH = 512;\nconst CANVAS_HEIGHT = 512;\n\nconst Sandbox = () => {\n  const [useWireframe, setUseWireframe] = useState(false);\n  const [showCube, setShowCube] = useState(false);\n  const [showXYGrid, setShowXYGrid] = useState(true);\n  const [showSphere, setShowSphere] = useState(false);\n  const [groups, setGroups] = useState([]);\n\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n\n    const gl = getGL(canvas);\n    if (!gl) {\n      alert('Sorry, your browser does not support WebGL');\n      return;\n    }\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LESS);\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    const simpleShaderProgram = initSimpleShaderProgram(gl, VERTEX_SHADER, FRAGMENT_SHADER);\n    if (!simpleShaderProgram) {\n      alert('Shader initialization failed.');\n      return;\n    }\n\n    gl.useProgram(simpleShaderProgram);\n\n    const vertexPositionAttribute = gl.getAttribLocation(simpleShaderProgram, 'vertexPosition');\n    gl.enableVertexAttribArray(vertexPositionAttribute);\n    const colorUniform = gl.getUniformLocation(simpleShaderProgram, 'color');\n\n    const drawScene = () => {\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n      const objectsToDraw = [];\n\n      if (showXYGrid) {\n        objectsToDraw.push(new XYGrid());\n      }\n      if (showCube) {\n        objectsToDraw.push(new Cube(1));\n      }\n      if (showSphere) {\n        objectsToDraw.push(new Sphere());\n      }\n\n      objectsToDraw.forEach(object => {\n        const vertices = useWireframe ? object.toRawLineArray() : object.toRawTriangleArray();\n        const verticesBuffer = initVertexBuffer(gl, vertices);\n        const color = object.color;\n        const colors = new Array(vertices.length / 3).fill([color.r, color.g, color.b]).flat();\n        const colorsBuffer = initVertexBuffer(gl, colors);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);\n        gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);\n        gl.uniform3f(colorUniform, color.r, color.g, color.b);\n\n        if (useWireframe || !object.indices) {\n          gl.drawArrays(gl.LINES, 0, vertices.length / 3);\n        } else {\n          const indexBuffer = initIndexBuffer(gl, object.indices);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n          gl.drawElements(gl.TRIANGLES, object.indices.length, gl.UNSIGNED_SHORT, 0);\n        }\n      });\n    };\n\n    drawScene();\n  }, [useWireframe, showCube, showXYGrid, showSphere]);\n\n  const toggleCube = () => setShowCube(!showCube);\n  const toggleXYGrid = () => setShowXYGrid(!showXYGrid);\n  const toggleSphere = () => setShowSphere(!showSphere);\n\n  return (\n    <article>\n      <p>The sandbox scene is where you can demonstrate features/capabilities of your library.</p>\n      <button onClick={() => setUseWireframe(!useWireframe)}>{useWireframe ? 'Show Filled' : 'Show Wireframe'}</button>\n      <button onClick={toggleCube}>{showCube ? 'Remove Cube' : 'Add Cube'}</button>\n      <button onClick={toggleXYGrid}>{showXYGrid ? 'Remove XY Grid' : 'Add XY Grid'}</button>\n      <button onClick={toggleSphere}>{showSphere ? 'Remove Sphere' : 'Add Sphere'}</button>\n      <canvas width={CANVAS_WIDTH} height={CANVAS_HEIGHT} ref={canvasRef} />\n    </article>\n  );\n};\n\nexport default Sandbox;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,KAAK,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,uBAAuB,QAAQ,cAAc;AAChG,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,KAAK,QAAQ,SAAS;AAC/B,OAAOC,MAAM,MAAM,iBAAiB;AAAC;AAErC,MAAMC,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,eAAe,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,YAAY,GAAG,GAAG;AACxB,MAAMC,aAAa,GAAG,GAAG;AAEzB,MAAMC,OAAO,GAAG,MAAM;EAAA;EAAA;EACpB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACuB,MAAM,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMyB,SAAS,GAAG1B,MAAM,EAAE;EAE1B,GAAAD,SAAS,IAAC,MAAM;IAAA;IACd,MAAM4B,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;MACX;IACF;IAEA,MAAME,EAAE,GAAG3B,KAAK,CAACyB,MAAM,CAAC;IACxB,IAAI,CAACE,EAAE,EAAE;MACPC,KAAK,CAAC,4CAA4C,CAAC;MACnD;IACF;IAEAD,EAAE,CAACE,MAAM,CAACF,EAAE,CAACG,UAAU,CAAC;IACxBH,EAAE,CAACI,SAAS,CAACJ,EAAE,CAACK,IAAI,CAAC;IACrBL,EAAE,CAACM,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACjCN,EAAE,CAACO,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAET,MAAM,CAACU,KAAK,EAAEV,MAAM,CAACW,MAAM,CAAC;IAE9C,MAAMC,mBAAmB,GAAGlC,uBAAuB,CAACwB,EAAE,EAAElB,aAAa,EAAEC,eAAe,CAAC;IACvF,IAAI,CAAC2B,mBAAmB,EAAE;MACxBT,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACF;IAEAD,EAAE,CAACW,UAAU,CAACD,mBAAmB,CAAC;IAElC,MAAME,uBAAuB,GAAGZ,EAAE,CAACa,iBAAiB,CAACH,mBAAmB,EAAE,gBAAgB,CAAC;IAC3FV,EAAE,CAACc,uBAAuB,CAACF,uBAAuB,CAAC;IACnD,MAAMG,YAAY,GAAGf,EAAE,CAACgB,kBAAkB,CAACN,mBAAmB,EAAE,OAAO,CAAC;IAExE,MAAMO,SAAS,GAAG,MAAM;MACtBjB,EAAE,CAACkB,KAAK,CAAClB,EAAE,CAACmB,gBAAgB,GAAGnB,EAAE,CAACoB,gBAAgB,CAAC;MAEnD,MAAMC,aAAa,GAAG,EAAE;MAExB,IAAI9B,UAAU,EAAE;QACd8B,aAAa,CAACC,IAAI,CAAC,IAAI7C,MAAM,EAAE,CAAC;MAClC;MACA,IAAIY,QAAQ,EAAE;QACZgC,aAAa,CAACC,IAAI,CAAC,IAAI5C,IAAI,CAAC,CAAC,CAAC,CAAC;MACjC;MACA,IAAIe,UAAU,EAAE;QACd4B,aAAa,CAACC,IAAI,CAAC,IAAI3C,MAAM,EAAE,CAAC;MAClC;MAEA0C,aAAa,CAACE,OAAO,CAACC,MAAM,IAAI;QAC9B,MAAMC,QAAQ,GAAGtC,YAAY,GAAGqC,MAAM,CAACE,cAAc,EAAE,GAAGF,MAAM,CAACG,kBAAkB,EAAE;QACrF,MAAMC,cAAc,GAAGtD,gBAAgB,CAAC0B,EAAE,EAAEyB,QAAQ,CAAC;QACrD,MAAMI,KAAK,GAAGL,MAAM,CAACK,KAAK;QAC1B,MAAMC,MAAM,GAAG,IAAIC,KAAK,CAACN,QAAQ,CAACO,MAAM,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAACJ,KAAK,CAACK,CAAC,EAAEL,KAAK,CAACM,CAAC,EAAEN,KAAK,CAACO,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE;QACtF,MAAMC,YAAY,GAAGhE,gBAAgB,CAAC0B,EAAE,EAAE8B,MAAM,CAAC;QAEjD9B,EAAE,CAACuC,UAAU,CAACvC,EAAE,CAACwC,YAAY,EAAEZ,cAAc,CAAC;QAC9C5B,EAAE,CAACyC,mBAAmB,CAAC7B,uBAAuB,EAAE,CAAC,EAAEZ,EAAE,CAAC0C,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QACzE1C,EAAE,CAAC2C,SAAS,CAAC5B,YAAY,EAAEc,KAAK,CAACK,CAAC,EAAEL,KAAK,CAACM,CAAC,EAAEN,KAAK,CAACO,CAAC,CAAC;QAErD,IAAIjD,YAAY,IAAI,CAACqC,MAAM,CAACoB,OAAO,EAAE;UACnC5C,EAAE,CAAC6C,UAAU,CAAC7C,EAAE,CAAC8C,KAAK,EAAE,CAAC,EAAErB,QAAQ,CAACO,MAAM,GAAG,CAAC,CAAC;QACjD,CAAC,MAAM;UACL,MAAMe,WAAW,GAAGxE,eAAe,CAACyB,EAAE,EAAEwB,MAAM,CAACoB,OAAO,CAAC;UACvD5C,EAAE,CAACuC,UAAU,CAACvC,EAAE,CAACgD,oBAAoB,EAAED,WAAW,CAAC;UACnD/C,EAAE,CAACiD,YAAY,CAACjD,EAAE,CAACkD,SAAS,EAAE1B,MAAM,CAACoB,OAAO,CAACZ,MAAM,EAAEhC,EAAE,CAACmD,cAAc,EAAE,CAAC,CAAC;QAC5E;MACF,CAAC,CAAC;IACJ,CAAC;IAEDlC,SAAS,EAAE;EACb,CAAC;IAAA,QA3CCjB,EAAE,CAACW,UAAU;EAAA,IA2CZ,CAACxB,YAAY,EAAEE,QAAQ,EAAEE,UAAU,EAAEE,UAAU,CAAC,CAAC;EAEpD,MAAM2D,UAAU,GAAG,MAAM9D,WAAW,CAAC,CAACD,QAAQ,CAAC;EAC/C,MAAMgE,YAAY,GAAG,MAAM7D,aAAa,CAAC,CAACD,UAAU,CAAC;EACrD,MAAM+D,YAAY,GAAG,MAAM5D,aAAa,CAAC,CAACD,UAAU,CAAC;EAErD,oBACE;IAAA,wBACE;MAAA,UAAG;IAAqF;MAAA;MAAA;MAAA;IAAA,QAAI,eAC5F;MAAQ,OAAO,EAAE,MAAML,eAAe,CAAC,CAACD,YAAY,CAAE;MAAA,UAAEA,YAAY,GAAG,aAAa,GAAG;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAU,eACjH;MAAQ,OAAO,EAAEiE,UAAW;MAAA,UAAE/D,QAAQ,GAAG,aAAa,GAAG;IAAU;MAAA;MAAA;MAAA;IAAA,QAAU,eAC7E;MAAQ,OAAO,EAAEgE,YAAa;MAAA,UAAE9D,UAAU,GAAG,gBAAgB,GAAG;IAAa;MAAA;MAAA;MAAA;IAAA,QAAU,eACvF;MAAQ,OAAO,EAAE+D,YAAa;MAAA,UAAE7D,UAAU,GAAG,eAAe,GAAG;IAAY;MAAA;MAAA;MAAA;IAAA,QAAU,eACrF;MAAQ,KAAK,EAAET,YAAa;MAAC,MAAM,EAAEC,aAAc;MAAC,GAAG,EAAEY;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEd,CAAC;AAAC,IA3FIX,OAAO;AAAA,KAAPA,OAAO;AA6Fb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module"}