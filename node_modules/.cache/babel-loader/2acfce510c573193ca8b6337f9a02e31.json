{"ast":null,"code":"var _jsxFileName = \"/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Sandbox.js\",\n  _s = $RefreshSig$();\n/**\n * Build out this component to display a “sandbox” scene—see the description below.\n */\nimport { useEffect, useRef } from 'react';\nimport { getGL, initVertexBuffer, compileShader, linkShaderProgram, initSimpleShaderProgram } from './glsl-utils';\nimport createXYGridVertices from './Geometries/XY-Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VERTEX_SHADER = `\n  //\n`;\nconst FRAGMENT_SHADER = `\n  //\n`;\nconst CANVAS_WIDTH = 512;\nconst CANVAS_HEIGHT = 512;\nconst FRAMES_PER_SECOND = 30;\nconst MILLISECONDS_PER_FRAME = 1000 / FRAMES_PER_SECOND;\nconst Sandbox = props => {\n  _s();\n  const canvasRef = useRef();\n  const timestampRef = useRef();\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const gl = getGL(canvas);\n    if (!gl) {\n      alert('Your browser does not support WebGL');\n    }\n    gl.enable(gl.DEPTH_TEST);\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    // Shader initialization\n    // TODO: Initialize your shaders here (vertex shader and fragment shader)\n    // This involves compiling shaders and linking them to a shader program\n\n    // Object and scene initialization\n    // TODO: Define your 3D objects here\n    // This might involve creating vertex buffers, index buffers, and setting up vertex attributes\n\n    const objectsToDraw = [{\n      color: {\n        r: 0.7,\n        g: 0.7,\n        b: 0.7\n      },\n      // Assuming a grey color for the grid lines\n      vertices: createXYGridVertices(),\n      // Directly using the vertices from the grid generation function\n      mode: gl.LINES\n    }];\n\n    // Load buffers with vertex data\n    objectsToDraw.forEach(objectToDraw => {\n      objectToDraw.verticesBuffer = initVertexBuffer(gl, objectToDraw.vertices);\n      if (!objectToDraw.colors) {\n        // If we have a single color, we expand that into an array\n        // of the same color over and over.\n        objectToDraw.colors = [];\n        for (let i = 0, maxi = objectToDraw.vertices.length / 3; i < maxi; i += 1) {\n          objectToDraw.colors = objectToDraw.colors.concat(objectToDraw.color.r, objectToDraw.color.g, objectToDraw.color.b);\n        }\n      }\n      objectToDraw.colorsBuffer = initVertexBuffer(gl, objectToDraw.colors);\n    });\n\n    // drawing obj by vertices\n    const drawByVertices = object => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, object.verticesBuffer);\n      gl.vertexAttribPointer(vertexPositonAttribute, 3, gl.FLOAT, false, 0, 0);\n      gl.drawArrays(object.mode, 0, object.vertices.lenght / 3);\n    };\n    const drawScene = () => {\n      // Clear the display.\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n      // TODO: Render your objects here. This could involve binding buffers, setting shader uniforms, and making draw calls.\n\n      // Example: gl.drawArrays or gl.drawElements calls for rendering.\n\n      // Display obj (forEach)\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n      // All done.\n      // might not be needed\n      // gl.flush()\n    };\n\n    let previousTimestamp;\n    const nextFrame = timestamp => {\n      // Initialize the timestamp.\n      if (!previousTimestamp) {\n        previousTimestamp = timestamp;\n        window.requestAnimationFrame(nextFrame);\n        return;\n      }\n\n      // Check if it’s time to advance.\n      const progress = timestamp - previousTimestamp;\n      if (progress < MILLISECONDS_PER_FRAME) {\n        // Do nothing if it’s too soon.\n        window.requestAnimationFrame(nextFrame);\n        return;\n      }\n\n      // Update objects' positions, animations, etc., here based on elapsed time\n\n      drawScene();\n      if (timestampRef.current) {\n        timestampRef.current.innerText = `Timestamp: ${timestamp.toFixed(2)}`;\n      }\n\n      // Request the next frame.\n      previousTimestamp = timestamp;\n      window.requestAnimationFrame(nextFrame);\n    };\n    drawScene();\n    window.requestAnimationFrame(nextFrame);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The sandbox scene is where you can demonstrate features/capabilities of your library solely for the purpose of demonstrating them. It doesn\\u2019t have to fit any particular pitch or application.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: CANVAS_WIDTH,\n        height: CANVAS_HEIGHT,\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: timestampRef,\n        style: {\n          position: 'absolute',\n          top: '7px',\n          left: '10px',\n          color: 'black'\n        },\n        children: \"Timestamp: 0.00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(Sandbox, \"R0tpnDtzRr4QLNeC7f9WYTtRP00=\");\n_c = Sandbox;\nexport default Sandbox;\nvar _c;\n$RefreshReg$(_c, \"Sandbox\");","map":{"version":3,"names":["useEffect","useRef","getGL","initVertexBuffer","compileShader","linkShaderProgram","initSimpleShaderProgram","createXYGridVertices","VERTEX_SHADER","FRAGMENT_SHADER","CANVAS_WIDTH","CANVAS_HEIGHT","FRAMES_PER_SECOND","MILLISECONDS_PER_FRAME","Sandbox","props","canvasRef","timestampRef","canvas","current","gl","alert","enable","DEPTH_TEST","clearColor","viewport","width","height","objectsToDraw","color","r","g","b","vertices","mode","LINES","forEach","objectToDraw","verticesBuffer","colors","i","maxi","length","concat","colorsBuffer","drawByVertices","object","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","vertexPositonAttribute","FLOAT","drawArrays","lenght","drawScene","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","previousTimestamp","nextFrame","timestamp","window","requestAnimationFrame","progress","innerText","toFixed","position","top","left"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Sandbox.js"],"sourcesContent":["/**\n * Build out this component to display a “sandbox” scene—see the description below.\n */\nimport { useEffect, useRef } from 'react'\nimport { getGL, initVertexBuffer, compileShader, linkShaderProgram, initSimpleShaderProgram } from './glsl-utils'\nimport createXYGridVertices from './Geometries/XY-Grid'\n\nconst VERTEX_SHADER =  `\n  //\n`\n\nconst FRAGMENT_SHADER = `\n  //\n`\n\n\n\nconst CANVAS_WIDTH = 512\nconst CANVAS_HEIGHT = 512\n\nconst FRAMES_PER_SECOND = 30\nconst MILLISECONDS_PER_FRAME = 1000 / FRAMES_PER_SECOND\n\nconst Sandbox = props => {\n  const canvasRef = useRef()\n  const timestampRef = useRef()\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) {\n      return\n    }\n\n    const gl = getGL(canvas)\n\n    if (!gl) {\n      alert('Your browser does not support WebGL')\n    }\n\n    gl.enable(gl.DEPTH_TEST)\n    gl.clearColor(0.0, 0.0, 0.0, 0.0)\n    gl.viewport(0, 0, canvas.width, canvas.height)\n\n  \n\n    // Shader initialization\n    // TODO: Initialize your shaders here (vertex shader and fragment shader)\n    // This involves compiling shaders and linking them to a shader program\n\n    // Object and scene initialization\n    // TODO: Define your 3D objects here\n    // This might involve creating vertex buffers, index buffers, and setting up vertex attributes\n\n    const objectsToDraw = [\n      {\n        color: { r: 0.7, g: 0.7, b: 0.7 }, // Assuming a grey color for the grid lines\n        vertices: createXYGridVertices(), // Directly using the vertices from the grid generation function\n        mode: gl.LINES\n      }\n    ]\n\n    // Load buffers with vertex data\n    objectsToDraw.forEach(objectToDraw => {\n      objectToDraw.verticesBuffer = initVertexBuffer(gl, objectToDraw.vertices)\n\n      if (!objectToDraw.colors) {\n        // If we have a single color, we expand that into an array\n        // of the same color over and over.\n        objectToDraw.colors = []\n        for (let i = 0, maxi = objectToDraw.vertices.length / 3; i < maxi; i += 1) {\n          objectToDraw.colors = objectToDraw.colors.concat(\n            objectToDraw.color.r,\n            objectToDraw.color.g,\n            objectToDraw.color.b\n          )\n        }\n      }\n\n      objectToDraw.colorsBuffer = initVertexBuffer(gl, objectToDraw.colors)\n    })\n\n    // drawing obj by vertices\n    const drawByVertices = (object) => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, object.verticesBuffer)\n      gl.vertexAttribPointer(vertexPositonAttribute, 3, gl.FLOAT, false, 0, 0)\n\n      gl.drawArrays(object.mode, 0, object.vertices.lenght / 3)\n    }\n\n\n    const drawScene = () => {\n      // Clear the display.\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n      // TODO: Render your objects here. This could involve binding buffers, setting shader uniforms, and making draw calls.\n\n      // Example: gl.drawArrays or gl.drawElements calls for rendering.\n\n      // Display obj (forEach)\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, null)\n\n      // All done.\n      // might not be needed\n      // gl.flush()\n    }\n\n    let previousTimestamp\n    const nextFrame = timestamp => {\n      // Initialize the timestamp.\n      if (!previousTimestamp) {\n        previousTimestamp = timestamp\n        window.requestAnimationFrame(nextFrame)\n        return\n      }\n\n      // Check if it’s time to advance.\n      const progress = timestamp - previousTimestamp\n      if (progress < MILLISECONDS_PER_FRAME) {\n        // Do nothing if it’s too soon.\n        window.requestAnimationFrame(nextFrame)\n        return\n      }\n\n      // Update objects' positions, animations, etc., here based on elapsed time\n\n      drawScene()\n\n      if (timestampRef.current) {\n        timestampRef.current.innerText = `Timestamp: ${timestamp.toFixed(2)}`\n      }\n\n      // Request the next frame.\n      previousTimestamp = timestamp\n      window.requestAnimationFrame(nextFrame)\n    }\n\n    drawScene()\n\n    window.requestAnimationFrame(nextFrame)\n  }, [])\n\n  return (\n    <article>\n      <p>\n        The sandbox scene is where you can demonstrate features/capabilities of your library solely for the purpose of\n        demonstrating them. It doesn’t have to fit any particular pitch or application.\n      </p>\n\n      <div style={{ position: 'relative' }}>\n        <canvas width={CANVAS_WIDTH} height={CANVAS_HEIGHT} ref={canvasRef} />\n        <div ref={timestampRef} style={{ position: 'absolute', top: '7px', left: '10px', color: 'black' }}>\n          Timestamp: 0.00\n        </div>\n      </div>\n    </article>\n  )\n}\n\nexport default Sandbox\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}