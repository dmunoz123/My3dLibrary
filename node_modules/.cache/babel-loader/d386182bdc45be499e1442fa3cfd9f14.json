{"ast":null,"code":"export default class Sphere {\n  constructor() {\n    let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let widthSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;\n    let heightSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;\n    this.toRawTriangleArray = sphere => {\n      const result = [];\n      for (let i = 0; i < sphere.indices.length; i += 3) {\n        for (let j = 0; j < 3; j++) {\n          const idx = sphere.indices[i + j] * 3;\n          result.push(sphere.vertices[idx], sphere.vertices[idx + 1], sphere.vertices[idx + 2]);\n        }\n      }\n      return result;\n    };\n    this.toRawLineArray = sphere => {\n      const result = [];\n      for (let i = 0; i < sphere.indices.length; i += 3) {\n        for (let j = 0; j < 3; j++) {\n          const idx1 = sphere.indices[i + j] * 3;\n          const idx2 = sphere.indices[i + (j + 1) % 3] * 3;\n          // Add line segment between vertices[idx1] and vertices[idx2]\n          result.push(sphere.vertices[idx1], sphere.vertices[idx1 + 1], sphere.vertices[idx1 + 2], sphere.vertices[idx2], sphere.vertices[idx2 + 1], sphere.vertices[idx2 + 2]);\n        }\n      }\n      return result;\n    };\n    this.radius = radius;\n    this.widthSegments = widthSegments;\n    this.heightSegments = heightSegments;\n    this.vertices = [];\n    this.indices = [];\n    this.generateSphere();\n  }\n  generateSphere() {\n    const phiStart = 0;\n    const phiLength = Math.PI * 2;\n    const thetaStart = 0;\n    const thetaLength = Math.PI;\n    for (let y = 0; y <= this.heightSegments; y++) {\n      const verticesRow = [];\n      const v = y / this.heightSegments;\n      for (let x = 0; x <= this.widthSegments; x++) {\n        const u = x / this.widthSegments;\n        const xpos = this.radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        const ypos = this.radius * Math.cos(thetaStart + v * thetaLength);\n        const zpos = this.radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        this.vertices.push(xpos, ypos, zpos);\n        verticesRow.push(this.vertices.length / 3 - 1);\n      }\n      if (y > 0) {\n        for (let x = 0; x < this.widthSegments; x++) {\n          const a = verticesRow[x];\n          const b = verticesRow[x + 1];\n          const c = verticesRow[x + 1] - (this.widthSegments + 1);\n          const d = verticesRow[x] - (this.widthSegments + 1);\n          this.indices.push(a, d, b);\n          this.indices.push(b, d, c);\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["Sphere","constructor","radius","widthSegments","heightSegments","toRawTriangleArray","sphere","result","i","indices","length","j","idx","push","vertices","toRawLineArray","idx1","idx2","generateSphere","phiStart","phiLength","Math","PI","thetaStart","thetaLength","y","verticesRow","v","x","u","xpos","cos","sin","ypos","zpos","a","b","c","d"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Geometries/Sphere.js"],"sourcesContent":["export default class Sphere {\n  constructor(radius = 1, widthSegments = 9, heightSegments = 6) {\n    this.radius = radius\n    this.widthSegments = widthSegments\n    this.heightSegments = heightSegments\n    this.vertices = []\n    this.indices = []\n    this.generateSphere()\n  }\n\n  generateSphere() {\n    const phiStart = 0\n    const phiLength = Math.PI * 2\n    const thetaStart = 0\n    const thetaLength = Math.PI\n\n    for (let y = 0; y <= this.heightSegments; y++) {\n      const verticesRow = []\n      const v = y / this.heightSegments\n\n      for (let x = 0; x <= this.widthSegments; x++) {\n        const u = x / this.widthSegments\n\n        const xpos = this.radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\n        const ypos = this.radius * Math.cos(thetaStart + v * thetaLength)\n        const zpos = this.radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\n\n        this.vertices.push(xpos, ypos, zpos)\n        verticesRow.push(this.vertices.length / 3 - 1)\n      }\n\n      if (y > 0) {\n        for (let x = 0; x < this.widthSegments; x++) {\n          const a = verticesRow[x]\n          const b = verticesRow[x + 1]\n          const c = verticesRow[x + 1] - (this.widthSegments + 1)\n          const d = verticesRow[x] - (this.widthSegments + 1)\n\n          this.indices.push(a, d, b)\n          this.indices.push(b, d, c)\n        }\n      }\n    }\n  }\n\n  toRawTriangleArray = sphere => {\n    const result = []\n    for (let i = 0; i < sphere.indices.length; i += 3) {\n      for (let j = 0; j < 3; j++) {\n        const idx = sphere.indices[i + j] * 3\n        result.push(sphere.vertices[idx], sphere.vertices[idx + 1], sphere.vertices[idx + 2])\n      }\n    }\n    return result\n  }\n\n  toRawLineArray = sphere => {\n    const result = []\n    for (let i = 0; i < sphere.indices.length; i += 3) {\n      for (let j = 0; j < 3; j++) {\n        const idx1 = sphere.indices[i + j] * 3\n        const idx2 = sphere.indices[i + ((j + 1) % 3)] * 3\n        // Add line segment between vertices[idx1] and vertices[idx2]\n        result.push(\n          sphere.vertices[idx1],\n          sphere.vertices[idx1 + 1],\n          sphere.vertices[idx1 + 2],\n          sphere.vertices[idx2],\n          sphere.vertices[idx2 + 1],\n          sphere.vertices[idx2 + 2]\n        )\n      }\n    }\n    return result\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}