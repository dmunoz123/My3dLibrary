{"ast":null,"code":"import { Transformable } from '../Group';\nexport default class Cube extends Transformable {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    super();\n    this.toRawTriangleArray = protoGeometry => {\n      const result = [];\n      protoGeometry.facesByIndex.forEach(face => {\n        face.forEach(vertexIndex => {\n          result.push(...protoGeometry.vertices[vertexIndex]);\n        });\n      });\n      return result;\n    };\n    this.toRawLineArray = protoGeometry => {\n      const result = [];\n      protoGeometry.facesByIndex.forEach(face => {\n        // Oddly enough, the inner loop here is clearer as a `for` loop because we\n        // need to access the current vertex index and the one after that (wrapping\n        // around once we get to the end).\n        for (let i = 0, maxI = face.length; i < maxI; i += 1) {\n          // “Connect the dots.”\n          result.push(...protoGeometry.vertices[face[i]], ...protoGeometry.vertices[face[(i + 1) % maxI]] // Lets us wrap around to 0.\n          );\n        }\n      });\n\n      return result;\n    };\n    this.size = size; // user can manipulate size of cube on init\n    this.vertices = this.generateVertices(size);\n    this.facesByIndex = this.defineFacesByIndex();\n  }\n  generateVertices(size) {\n    return [[-0.5, -0.5, -0.5],\n    // 0\n    [0.5, -0.5, -0.5],\n    // 1\n    [0.5, 0.5, -0.5],\n    // 2\n    [-0.5, 0.5, -0.5],\n    // 3\n    [-0.5, -0.5, 0.5],\n    // 4\n    [0.5, -0.5, 0.5],\n    // 5\n    [0.5, 0.5, 0.5],\n    // 6\n    [-0.5, 0.5, 0.5] // 7\n    ].map(vertex => vertex.map(coordinate => coordinate * size));\n  }\n  defineFacesByIndex() {\n    return [[0, 3, 2], [0, 2, 1],\n    // back\n    [1, 2, 6], [1, 6, 5],\n    // right\n    [4, 6, 7], [4, 5, 6],\n    // front\n    [0, 7, 3], [0, 4, 7],\n    // left\n    [4, 1, 5], [4, 0, 1],\n    // bottom\n    [3, 7, 6], [3, 6, 2] // top\n    ];\n  }\n}","map":{"version":3,"names":["Transformable","Cube","constructor","size","toRawTriangleArray","protoGeometry","result","facesByIndex","forEach","face","vertexIndex","push","vertices","toRawLineArray","i","maxI","length","generateVertices","defineFacesByIndex","map","vertex","coordinate"],"sources":["/home/munoz/Desktop/Spring2024/cmsi3710/final/our-own-3d-library-daniel_munoz/src/Geometries/Cube.js"],"sourcesContent":["import { Transformable } from '../Group'\n\nexport default class Cube extends Transformable {\n  constructor(size = 1) {\n    super()\n    this.size = size // user can manipulate size of cube on init\n    this.vertices = this.generateVertices(size)\n    this.facesByIndex = this.defineFacesByIndex()\n  }\n\n  generateVertices(size) {\n    return [\n      [-0.5, -0.5, -0.5], // 0\n      [0.5, -0.5, -0.5], // 1\n      [0.5, 0.5, -0.5], // 2\n      [-0.5, 0.5, -0.5], // 3\n      [-0.5, -0.5, 0.5], // 4\n      [0.5, -0.5, 0.5], // 5\n      [0.5, 0.5, 0.5], // 6\n      [-0.5, 0.5, 0.5] // 7\n    ].map(vertex => vertex.map(coordinate => coordinate * size))\n  }\n\n  defineFacesByIndex() {\n    return [\n      [0, 3, 2],\n      [0, 2, 1], // back\n      [1, 2, 6],\n      [1, 6, 5], // right\n      [4, 6, 7],\n      [4, 5, 6], // front\n      [0, 7, 3],\n      [0, 4, 7], // left\n      [4, 1, 5],\n      [4, 0, 1], // bottom\n      [3, 7, 6],\n      [3, 6, 2] // top\n    ]\n  }\n\n  toRawTriangleArray = protoGeometry => {\n    const result = []\n\n    protoGeometry.facesByIndex.forEach(face => {\n      face.forEach(vertexIndex => {\n        result.push(...protoGeometry.vertices[vertexIndex])\n      })\n    })\n\n    return result\n  }\n\n  toRawLineArray = protoGeometry => {\n    const result = []\n\n    protoGeometry.facesByIndex.forEach(face => {\n      // Oddly enough, the inner loop here is clearer as a `for` loop because we\n      // need to access the current vertex index and the one after that (wrapping\n      // around once we get to the end).\n      for (let i = 0, maxI = face.length; i < maxI; i += 1) {\n        // “Connect the dots.”\n        result.push(\n          ...protoGeometry.vertices[face[i]],\n          ...protoGeometry.vertices[face[(i + 1) % maxI]] // Lets us wrap around to 0.\n        )\n      }\n    })\n\n    return result\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}